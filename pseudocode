'''
This is the pseudocode for creating the House class object
Modified: February 15, 2021 by NAR
'''


class House:

    def __init__(self, city, solar):
        self.city = city
        self.solar = solar

    def savings_in_range(self, start_date, end_date):
        """
        This function take a date range from the user and returns the household savings for
        that range
        The solar_savings function is called and then indexed within the provided range
        The remaining hourly savings are then summed and returned to the user
        :param start_date:
        :param end_date:
        :return savings:
        """

    def cost_in_range(self, start_date, end_date):
        """
        This function take a date range from the user and returns the household costs for
        that range
        The real_cost function is called and then indexed within the provided range
        The remaining hourly costs are then summed and returned to the user
        :param start_date:
        :param end_date:
        :return cost:
        """

    def __real_cost(self):
        """
        This function returns an array containing hourly energy cost for the household.
        The get_cost function is called to get $/kWh
        The get_station is called to get the station closest to the House city
        The solar_savings array is subtracted from the no_solar_cost array and multiplied by $/kWh
        :return cost_array:
        """

    def __get_station(self):
        tmy3_dict = {
            "Pittsburgh": 725200,
            "Boston": 725090,
            "Charlotte": 723140,
            "Washington DC": 724050,
            "Nashville": 723270
        }
        city = self.city
        station = tmy3_dict[city]
        return station

    def __get_cost(self, station):
        """
        This function returns the cost per kWh given by a local utility:
        The get_coords function is called to get the stations coordinates
        The coordinates are used to to call the OpenEI API
        Then the url for the cost per kWh is pulled from the data returned by the API
        Then beautifulsoup is used to pull the cost per kWh from the webpage
        :return cost_kwh:
        """

    def __get_coords(self, station):
        tmy3_coord = {
            725200: {'lat': 40.5, 'lng': -80.233},
            725090: {'lat': 42.367, 'lng': -71.071},
            723140: {'lat': 35.217, 'lng': -80.95},
            724050: {'lat': 38.867, 'lng': -77.033},
            723270: {'lat': 36.117, 'lng': -86.683}
        }
        lat = tmy3_coord[station['lat']]
        lng = tmy3_coord[station['lng']]
        return lat, lng

    def __real_savings(self):
        """
        This function returns an array containing hourly savings from solar installation.
        The get_station and get_cost functions are called and sent to the solar_savings function
        :return savings_array:
        """
    
    def __solar_savings(self, station, cost_kwh):
        """
        This function returns hourly savings from solar installation
        The solar_supply function is called to get the kWh of solar energy available per hour
        The available solar energy is multiplied by the cost_kwh.
        An estimated solar maintenance cost is subtracted
        :return savings_array:
        """

    def __solar_supply(self, station):
        """
        This function returns potential kWh supply each hour for the household:
        There is a check to see if the house is a solar house, if not return a zeroed array
        The station number and a get request are used to access the data from NCDC
        The global horizontal data is used along with a conversion equation to find the
        potential supply of solar energy over a year
        :return solar_supply:
        """

    def __no_solar_cost(self, station, cost_kwh):
        """
        This function returns hourly cost from energy for the household
        The energy_demand function is called to get the kWh of energy demanded per hour
        The energy demanded is multiplied by the cost_kwh.
        :return no_solar_cost:
        """

    def __energy_demand(self, station):
        """
        This function returns the kWh demanded each hour of the year for the household
        The station and beautifulsoup are used to pull the correct data file from the OpenEI
        Then the electrical data is summed in a new column to give total hourly kW
        is returned
        :return energy_demand:
        """
